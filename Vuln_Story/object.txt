📜 PROJECT BRIEF FOR WARP AI
🎯 Project: Vulnerability Story Teller

A tool that parses vulnerability scanner exports (like Burp Suite), uses AI to generate a human-friendly explanation of findings, and outputs a clean, readable report in Markdown/HTML/PDF format.
🧱 Step-by-Step Build Plan for WARP AI
✅ 1. Setup Project Directory

mkdir vuln-story-teller && cd vuln-story-teller
python3 -m venv venv && source venv/bin/activate
pip install openai beautifulsoup4 xmltodict jinja2 markdown2 pdfkit flask
touch main.py

✅ 2. Build Core Modules
📂 Structure:

vuln-story-teller/
│
├── parsers/
│   ├── burp_parser.py        # Handles XML/JSON from Burp Suite
│
├── ai_engine/
│   ├── storygen.py           # Uses OpenAI to turn vuln data into stories
│
├── templates/
│   ├── report_template.html  # HTML template for final report
│
├── reports/
│   └── (generated reports)
│
├── main.py                   # Main CLI or Web interface
├── requirements.txt

✅ 3. Parsing Input

burp_parser.py:

import xmltodict

def parse_burp_xml(file_path):
    with open(file_path, 'r') as f:
        data = xmltodict.parse(f.read())

    issues = []
    for issue in data['issues']['issue']:
        issues.append({
            'host': issue['host'],
            'url': issue['host'] + issue['path'],
            'issue': issue['name'],
            'severity': issue['severity'],
            'description': issue.get('issueDetail', ''),
            'parameter': issue.get('param', 'N/A'),
            'request': issue.get('request', ''),
            'response': issue.get('response', '')
        })
    return issues

✅ 4. GPT-Based Story Generator

storygen.py:

import openai

openai.api_key = "your-api-key"

def generate_vuln_story(vuln_dict):
    prompt = f"""
You are a cybersecurity expert. Given this vulnerability:
- Name: {vuln_dict['issue']}
- Affected URL: {vuln_dict['url']}
- Parameter: {vuln_dict['parameter']}
- Severity: {vuln_dict['severity']}
- Description: {vuln_dict['description']}

Explain it as a story:
1. How a hacker would find it
2. How to exploit it
3. Why it matters
4. How to fix it
"""

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )

    return response['choices'][0]['message']['content']

✅ 5. Report Generator

HTML Template (templates/report_template.html):

<html>
<head><title>Vulnerability Report</title></head>
<body>
    <h1>📄 Vulnerability Report</h1>
    {% for item in vulns %}
    <hr>
    <h2>{{ item.issue }} — {{ item.severity }}</h2>
    <p><strong>URL:</strong> {{ item.url }}</p>
    <p><strong>Parameter:</strong> {{ item.parameter }}</p>
    <h3>🕵️ Exploit Story</h3>
    <pre>{{ item.story }}</pre>
    <h3>📨 Raw Request</h3>
    <pre>{{ item.request }}</pre>
    {% endfor %}
</body>
</html>

main.py:

from parsers.burp_parser import parse_burp_xml
from ai_engine.storygen import generate_vuln_story
from jinja2 import Environment, FileSystemLoader
import markdown2
import pdfkit

def main():
    burp_results = parse_burp_xml('sample.xml')

    for vuln in burp_results:
        vuln['story'] = generate_vuln_story(vuln)

    env = Environment(loader=FileSystemLoader('templates'))
    template = env.get_template('report_template.html')
    report_html = template.render(vulns=burp_results)

    with open("reports/final_report.html", "w") as f:
        f.write(report_html)

    pdfkit.from_file("reports/final_report.html", "reports/final_report.pdf")

if __name__ == "__main__":
    main()

💬 Summary for WARP AI

    WARP, you are helping me build a Python tool that:

        Takes Burp Suite scan outputs.

        Parses them into structured data.

        Uses GPT to write human-friendly stories about each vulnerability.

        Generates a Markdown/HTML/PDF report with that info.

    Follow the steps above one-by-one. Help me run and test after each step. Add error handling where needed. Optimize later.
